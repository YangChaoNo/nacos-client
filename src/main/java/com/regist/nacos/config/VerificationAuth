package com.regist.nacos.config;


import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.ExitCodeGenerator;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.stereotype.Component;

import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

@Slf4j
@Component
public class VerificationAuth implements ApplicationListener<ContextRefreshedEvent> {
    @Autowired
    private ApplicationContext context;
    @Value("${applet.dept}")
    private String ticoKey;
    @Override
    public void onApplicationEvent(ContextRefreshedEvent event) {
        // 容器加载完毕校验权限
        if (event.getApplicationContext().getParent() != null) {
            try {
//                String macAddress = getMacAddress();
                Path path = Paths.get("/home/ticokey.dat");
                String ckey = Files.readAllLines(path).get(0).trim();
                String top = "tico";
                List<String> macList = getMacIds();
                for (String macAddress : macList) {
                    String value = top + ticoKey + macAddress;
                    String md5 = getMd5(value);
                    if (!md5.equals(ckey)){
                        // 如无权限则关闭进程
                        int exitCode = SpringApplication.exit(context, (ExitCodeGenerator) () -> 0);
                        System.exit(exitCode);
                    }
                }
            }catch (Exception se){
                log.info("鉴权失败");
                se.printStackTrace();
            }
        }
    }

    public String getMacAddress() throws SocketException {
        StringBuilder address = new StringBuilder();
        Enumeration<NetworkInterface> allNetInterfaces = NetworkInterface.getNetworkInterfaces();
        byte[] mac = null;
        while (allNetInterfaces.hasMoreElements()) {
            NetworkInterface netInterface = allNetInterfaces.nextElement();
            if (netInterface.isLoopback() || netInterface.isVirtual() || netInterface.isPointToPoint() || !netInterface.isUp()) {
                continue;
            } else {
                mac = netInterface.getHardwareAddress();
                if (mac != null) {
                    for (int i = 0; i < mac.length; i++) {
                        address.append(String.format("%02X", mac[i]));
//                        address.append(String.format("%02X%s", mac[i], (i < mac.length - 1) ? "-" : ""));
                    }
                }
            }
        }
        return address.toString();
    }
    public String getMd5(String value) throws NoSuchAlgorithmException {
        StringBuffer sb = new StringBuffer();
        MessageDigest digest = MessageDigest.getInstance("MD5");
        byte[] bs = digest.digest(value.getBytes());
        for (byte b : bs) {
            int x = b & 255;
            String s = Integer.toHexString(x);
            if( x > 0 && x < 16 ){
                sb.append("0");
                sb.append(s);
            }else{
                sb.append(s);
            }
        }
        return sb.toString();
    }


    public static List<String> getMacIds() {
        InetAddress ip = null;
        NetworkInterface ni = null;
        List<String> macList = new ArrayList<String>();
        try {
            Enumeration<NetworkInterface> netInterfaces = (Enumeration<NetworkInterface>) NetworkInterface
                    .getNetworkInterfaces();
            while (netInterfaces.hasMoreElements()) {
                ni = (NetworkInterface) netInterfaces
                        .nextElement();
                Enumeration<InetAddress> ips = ni.getInetAddresses();
                while (ips.hasMoreElements()) {
                    ip = (InetAddress) ips.nextElement();
                    if (!ip.isLoopbackAddress() // 非127.0.0.1
                            && ip.getHostAddress().matches(
                            "(\\d{1,3}\\.){3}\\d{1,3}")) {
                        macList.add(getMacFromBytes(ni.getHardwareAddress()).toString().replace("-",""));
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return macList;
    }
    private static String getMacFromBytes(byte[] bytes) {
        StringBuffer mac = new StringBuffer();
        byte currentByte;
        boolean first = false;
        for (byte b : bytes) {
            if (first) {
                mac.append("-");
            }
            currentByte = (byte) ((b & 240) >> 4);
            mac.append(Integer.toHexString(currentByte));
            currentByte = (byte) (b & 15);
            mac.append(Integer.toHexString(currentByte));
            first = true;
        }
        return mac.toString().toUpperCase();
    }
}
